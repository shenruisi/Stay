/**
 Source code: https://github.com/greasemonkey/greasemonkey/blob/master/src/parse-meta-line.js
 Lincese: https://github.com/greasemonkey/greasemonkey/blob/master/LICENSE.mit
 Github: https://github.com/greasemonkey/greasemonkey
 */

 'use strict';

 // Private implementation.
 (function() {
 
 /*
  * Generated by PEG.js 0.9.0.
  *
  * http://pegjs.org/
  */
 
 function peg$subclass(child, parent) {
   function ctor() { this.constructor = child; }
   ctor.prototype = parent.prototype;
   child.prototype = new ctor();
 }
 
 function peg$SyntaxError(message, expected, found, location) {
   this.message  = message;
   this.expected = expected;
   this.found    = found;
   this.location = location;
   this.name     = "SyntaxError";
 
   if (typeof Error.captureStackTrace === "function") {
     Error.captureStackTrace(this, peg$SyntaxError);
   }
 }
 
 peg$subclass(peg$SyntaxError, Error);
 
 window.parseMetaLine = function(input) {
   var options = arguments.length > 1 ? arguments[1] : {},
       parser  = this,
 
       peg$FAILED = {},
 
       peg$startRuleFunctions = { line: peg$parseline },
       peg$startRuleFunction  = peg$parseline,
 
       peg$c0 = "// @",
       peg$c1 = { type: "literal", value: "// @", description: "\"// @\"" },
       peg$c2 = "\n",
       peg$c3 = { type: "literal", value: "\n", description: "\"\\n\"" },
       peg$c4 = function(meta) { return meta; },
       peg$c5 = /^[ \t\n]/,
       peg$c6 = { type: "class", value: "[ \\t\\n]", description: "[ \\t\\n]" },
       peg$c7 = /^[^ \t\n]/,
       peg$c8 = { type: "class", value: "[^ \\t\\n]", description: "[^ \\t\\n]" },
       peg$c9 = /^[^\n]/,
       peg$c10 = { type: "class", value: "[^\\n]", description: "[^\\n]" },
       peg$c11 = "noframes",
       peg$c12 = { type: "literal", value: "noframes", description: "\"noframes\"" },
       peg$c13 = function(keyword) { return {keyword:keyword}; },
       peg$c14 = "author",
       peg$c15 = { type: "literal", value: "author", description: "\"author\"" },
       peg$c16 = "downloadURL",
       peg$c17 = { type: "literal", value: "downloadURL", description: "\"downloadURL\"" },
       peg$c18 = "exclude",
       peg$c19 = { type: "literal", value: "exclude", description: "\"exclude\"" },
       peg$c20 = "grant",
       peg$c21 = { type: "literal", value: "grant", description: "\"grant\"" },
       peg$c22 = "homepageURL",
       peg$c23 = { type: "literal", value: "homepageURL", description: "\"homepageURL\"" },
       peg$c24 = "icon",
       peg$c25 = { type: "literal", value: "icon", description: "\"icon\"" },
       peg$c26 = "include",
       peg$c27 = { type: "literal", value: "include", description: "\"include\"" },
       peg$c28 = "installURL",
       peg$c29 = { type: "literal", value: "installURL", description: "\"installURL\"" },
       peg$c30 = "match",
       peg$c31 = { type: "literal", value: "match", description: "\"match\"" },
       peg$c32 = "namespace",
       peg$c33 = { type: "literal", value: "namespace", description: "\"namespace\"" },
       peg$c34 = "require",
       peg$c35 = { type: "literal", value: "require", description: "\"require\"" },
       peg$c36 = "run-at",
       peg$c37 = { type: "literal", value: "run-at", description: "\"run-at\"" },
       peg$c38 = "updateURL",
       peg$c39 = { type: "literal", value: "updateURL", description: "\"updateURL\"" },
       peg$c40 = "version",
       peg$c41 = { type: "literal", value: "version", description: "\"version\"" },
       peg$c42 = function(keyword, value) { return {keyword:keyword, value:value}; },
       peg$c43 = "resource",
       peg$c44 = { type: "literal", value: "resource", description: "\"resource\"" },
       peg$c45 = function(keyword, value1, value2) { return {keyword:keyword, value1:value1, value2:value2}; },
       peg$c46 = "description",
       peg$c47 = { type: "literal", value: "description", description: "\"description\"" },
       peg$c48 = "name",
       peg$c49 = { type: "literal", value: "name", description: "\"name\"" },
       peg$c50 = ":",
       peg$c51 = { type: "literal", value: ":", description: "\":\"" },
       peg$c52 = /^[a-zA-Z\-]/,
       peg$c53 = { type: "class", value: "[a-zA-Z-]", description: "[a-zA-Z-]" },
       peg$c54 = function(keyword, localeValue) { return localeValue },
       peg$c55 = function(keyword, locale, value) { return {keyword:keyword, locale:locale, value:value}; },
     
       peg$c56 = "note",
       peg$c57 = { type: "literal", value: "note", description: "\"note\"" },
     
       peg$c58 = "stay-engine",
       peg$c59 = { type: "literal", value: "stay-engine", description: "\"stay-engine\"" },
     
       peg$c60 = "inject-into",
       peg$c61 = { type: "literal", value: "inject-into", description: "\"inject-into\"" },
     
       peg$c62 = "license",
       peg$c63 = { type: "literal", value: "license", description: "\"license\"" },
       
       peg$currPos          = 0,
       peg$savedPos         = 0,
       peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
       peg$maxFailPos       = 0,
       peg$maxFailExpected  = [],
       peg$silentFails      = 0,
 
       peg$result;
 
   if ("startRule" in options) {
     if (!(options.startRule in peg$startRuleFunctions)) {
       throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
     }
 
     peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
   }
 
   function text() {
     return input.substring(peg$savedPos, peg$currPos);
   }
 
   function location() {
     return peg$computeLocation(peg$savedPos, peg$currPos);
   }
 
   function expected(description) {
     throw peg$buildException(
       null,
       [{ type: "other", description: description }],
       input.substring(peg$savedPos, peg$currPos),
       peg$computeLocation(peg$savedPos, peg$currPos)
     );
   }
 
   function error(message) {
     throw peg$buildException(
       message,
       null,
       input.substring(peg$savedPos, peg$currPos),
       peg$computeLocation(peg$savedPos, peg$currPos)
     );
   }
 
   function peg$computePosDetails(pos) {
     var details = peg$posDetailsCache[pos],
         p, ch;
 
     if (details) {
       return details;
     } else {
       p = pos - 1;
       while (!peg$posDetailsCache[p]) {
         p--;
       }
 
       details = peg$posDetailsCache[p];
       details = {
         line:   details.line,
         column: details.column,
         seenCR: details.seenCR
       };
 
       while (p < pos) {
         ch = input.charAt(p);
         if (ch === "\n") {
           if (!details.seenCR) { details.line++; }
           details.column = 1;
           details.seenCR = false;
         } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
           details.line++;
           details.column = 1;
           details.seenCR = true;
         } else {
           details.column++;
           details.seenCR = false;
         }
 
         p++;
       }
 
       peg$posDetailsCache[pos] = details;
       return details;
     }
   }
 
   function peg$computeLocation(startPos, endPos) {
     var startPosDetails = peg$computePosDetails(startPos),
         endPosDetails   = peg$computePosDetails(endPos);
 
     return {
       start: {
         offset: startPos,
         line:   startPosDetails.line,
         column: startPosDetails.column
       },
       end: {
         offset: endPos,
         line:   endPosDetails.line,
         column: endPosDetails.column
       }
     };
   }
 
   function peg$fail(expected) {
     if (peg$currPos < peg$maxFailPos) { return; }
 
     if (peg$currPos > peg$maxFailPos) {
       peg$maxFailPos = peg$currPos;
       peg$maxFailExpected = [];
     }
 
     peg$maxFailExpected.push(expected);
   }
 
   function peg$buildException(message, expected, found, location) {
     function cleanupExpected(expected) {
       var i = 1;
 
       expected.sort(function(a, b) {
         if (a.description < b.description) {
           return -1;
         } else if (a.description > b.description) {
           return 1;
         } else {
           return 0;
         }
       });
 
       while (i < expected.length) {
         if (expected[i - 1] === expected[i]) {
           expected.splice(i, 1);
         } else {
           i++;
         }
       }
     }
 
     function buildMessage(expected, found) {
       function stringEscape(s) {
         function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }
 
         return s
           .replace(/\\/g,   '\\\\')
           .replace(/"/g,    '\\"')
           .replace(/\x08/g, '\\b')
           .replace(/\t/g,   '\\t')
           .replace(/\n/g,   '\\n')
           .replace(/\f/g,   '\\f')
           .replace(/\r/g,   '\\r')
           .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
           .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
           .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
           .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
       }
 
       var expectedDescs = new Array(expected.length),
           expectedDesc, foundDesc, i;
 
       for (i = 0; i < expected.length; i++) {
         expectedDescs[i] = expected[i].description;
       }
 
       expectedDesc = expected.length > 1
         ? expectedDescs.slice(0, -1).join(", ")
             + " or "
             + expectedDescs[expected.length - 1]
         : expectedDescs[0];
 
       foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
 
       return "Expected " + expectedDesc + " but " + foundDesc + " found.";
     }
 
     if (expected !== null) {
       cleanupExpected(expected);
     }
 
     return new peg$SyntaxError(
       message !== null ? message : buildMessage(expected, found),
       expected,
       found,
       location
     );
   }
 
   function peg$parseline() {
     var s0, s1, s2, s3;
 
     s0 = peg$currPos;
     if (input.substr(peg$currPos, 4) === peg$c0) {
       s1 = peg$c0;
       peg$currPos += 4;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c1); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parsekeyword0();
       if (s2 === peg$FAILED) {
         s2 = peg$parsekeyword1();
         if (s2 === peg$FAILED) {
           s2 = peg$parsekeyword2();
           if (s2 === peg$FAILED) {
             s2 = peg$parsekeywordLocale();
           }
         }
       }
       if (s2 !== peg$FAILED) {
         if (input.charCodeAt(peg$currPos) === 10) {
           s3 = peg$c2;
           peg$currPos++;
         } else {
           s3 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c3); }
         }
         if (s3 === peg$FAILED) {
           s3 = null;
         }
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c4(s2);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
 
     return s0;
   }
 
   function peg$parsewhitespace() {
     var s0, s1;
 
     s0 = [];
     if (peg$c5.test(input.charAt(peg$currPos))) {
       s1 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c6); }
     }
     if (s1 !== peg$FAILED) {
       while (s1 !== peg$FAILED) {
         s0.push(s1);
         if (peg$c5.test(input.charAt(peg$currPos))) {
           s1 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s1 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c6); }
         }
       }
     } else {
       s0 = peg$FAILED;
     }
 
     return s0;
   }
 
   function peg$parsenon_whitespace() {
     var s0, s1, s2;
 
     s0 = peg$currPos;
     s1 = [];
     if (peg$c7.test(input.charAt(peg$currPos))) {
       s2 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s2 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c8); }
     }
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
         if (peg$c7.test(input.charAt(peg$currPos))) {
           s2 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s2 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c8); }
         }
       }
     } else {
       s1 = peg$FAILED;
     }
     if (s1 !== peg$FAILED) {
       s0 = input.substring(s0, peg$currPos);
     } else {
       s0 = s1;
     }
 
     return s0;
   }
 
   function peg$parsenon_newline() {
     var s0, s1, s2;
 
     s0 = peg$currPos;
     s1 = [];
     if (peg$c9.test(input.charAt(peg$currPos))) {
       s2 = input.charAt(peg$currPos);
       peg$currPos++;
     } else {
       s2 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c10); }
     }
     if (s2 !== peg$FAILED) {
       while (s2 !== peg$FAILED) {
         s1.push(s2);
         if (peg$c9.test(input.charAt(peg$currPos))) {
           s2 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s2 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c10); }
         }
       }
     } else {
       s1 = peg$FAILED;
     }
     if (s1 !== peg$FAILED) {
       s0 = input.substring(s0, peg$currPos);
     } else {
       s0 = s1;
     }
 
     return s0;
   }
 
   function peg$parsekeyword0() {
     var s0, s1;
 
     s0 = peg$currPos;
     if (input.substr(peg$currPos, 8) === peg$c11) {
       s1 = peg$c11;
       peg$currPos += 8;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c12); }
     }
     if (s1 !== peg$FAILED) {
       peg$savedPos = s0;
       s1 = peg$c13(s1);
     }
     s0 = s1;
 
     return s0;
   }
 
   function peg$parsekeyword1() {
     var s0, s1, s2, s3;
 
     s0 = peg$currPos;
     if (input.substr(peg$currPos, 6) === peg$c14) {
       s1 = peg$c14;
       peg$currPos += 6;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c15); }
     }
     if (s1 === peg$FAILED) {
       if (input.substr(peg$currPos, 11) === peg$c16) {
         s1 = peg$c16;
         peg$currPos += 11;
       } else {
         s1 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c17); }
       }
       if (s1 === peg$FAILED) {
         if (input.substr(peg$currPos, 7) === peg$c18) {
           s1 = peg$c18;
           peg$currPos += 7;
         } else {
           s1 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c19); }
         }
         if (s1 === peg$FAILED) {
           if (input.substr(peg$currPos, 5) === peg$c20) {
             s1 = peg$c20;
             peg$currPos += 5;
           } else {
             s1 = peg$FAILED;
             if (peg$silentFails === 0) { peg$fail(peg$c21); }
           }
           if (s1 === peg$FAILED) {
             if (input.substr(peg$currPos, 11) === peg$c22) {
               s1 = peg$c22;
               peg$currPos += 11;
             } else {
               s1 = peg$FAILED;
               if (peg$silentFails === 0) { peg$fail(peg$c23); }
             }
             if (s1 === peg$FAILED) {
               if (input.substr(peg$currPos, 4) === peg$c24) {
                 s1 = peg$c24;
                 peg$currPos += 4;
               } else {
                 s1 = peg$FAILED;
                 if (peg$silentFails === 0) { peg$fail(peg$c25); }
               }
               if (s1 === peg$FAILED) {
                 if (input.substr(peg$currPos, 7) === peg$c26) {
                   s1 = peg$c26;
                   peg$currPos += 7;
                 } else {
                   s1 = peg$FAILED;
                   if (peg$silentFails === 0) { peg$fail(peg$c27); }
                 }
                 if (s1 === peg$FAILED) {
                   if (input.substr(peg$currPos, 10) === peg$c28) {
                     s1 = peg$c28;
                     peg$currPos += 10;
                   } else {
                     s1 = peg$FAILED;
                     if (peg$silentFails === 0) { peg$fail(peg$c29); }
                   }
                   if (s1 === peg$FAILED) {
                     if (input.substr(peg$currPos, 5) === peg$c30) {
                       s1 = peg$c30;
                       peg$currPos += 5;
                     } else {
                       s1 = peg$FAILED;
                       if (peg$silentFails === 0) { peg$fail(peg$c31); }
                     }
                     if (s1 === peg$FAILED) {
                       if (input.substr(peg$currPos, 9) === peg$c32) {
                         s1 = peg$c32;
                         peg$currPos += 9;
                       } else {
                         s1 = peg$FAILED;
                         if (peg$silentFails === 0) { peg$fail(peg$c33); }
                       }
                       if (s1 === peg$FAILED) {
                         if (input.substr(peg$currPos, 7) === peg$c34) {
                           s1 = peg$c34;
                           peg$currPos += 7;
                         } else {
                           s1 = peg$FAILED;
                           if (peg$silentFails === 0) { peg$fail(peg$c35); }
                         }
                         if (s1 === peg$FAILED) {
                           if (input.substr(peg$currPos, 6) === peg$c36) {
                             s1 = peg$c36;
                             peg$currPos += 6;
                           } else {
                             s1 = peg$FAILED;
                             if (peg$silentFails === 0) { peg$fail(peg$c37); }
                           }
                           if (s1 === peg$FAILED) {
                             if (input.substr(peg$currPos, 9) === peg$c38) {
                               s1 = peg$c38;
                               peg$currPos += 9;
                             } else {
                               s1 = peg$FAILED;
                               if (peg$silentFails === 0) { peg$fail(peg$c39); }
                             }
                             if (s1 === peg$FAILED) {
                               if (input.substr(peg$currPos, 7) === peg$c40) {
                                 s1 = peg$c40;
                                 peg$currPos += 7;
                               } else {
                                 s1 = peg$FAILED;
                                 if (peg$silentFails === 0) { peg$fail(peg$c41); }
                               }
                               if (s1 === peg$FAILED) {
                                 if (input.substr(peg$currPos, 4) === peg$c56) {
                                   s1 = peg$c56;
                                   peg$currPos += 4;
                                 } else {
                                   s1 = peg$FAILED;
                                   if (peg$silentFails === 0) { peg$fail(peg$c57); }
                                 }
                                 if (s1 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 11) === peg$c58) {
                                      s1 = peg$c58;
                                      peg$currPos += 11;
                                    } else {
                                      s1 = peg$FAILED;
                                      if (peg$silentFails === 0) { peg$fail(peg$c59); }
                                    }
                                    if (s1 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 11) === peg$c60) {
                                          s1 = peg$c60;
                                          peg$currPos += 11;
                                        } else {
                                          s1 = peg$FAILED;
                                          if (peg$silentFails === 0) { peg$fail(peg$c61); }
                                        }
                                        if (s1 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 7) === peg$c62) {
                                              s1 = peg$c62;
                                              peg$currPos += 7;
                                            } else {
                                              s1 = peg$FAILED;
                                              if (peg$silentFails === 0) { peg$fail(peg$c63); }
                                            }
                                          }
                                      }
                                  }
                               }
                             }
                           }
                         }
                       }
                     }
                   }
                 }
               }
             }
           }
         }
       }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parsewhitespace();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsenon_newline();
         if (s3 !== peg$FAILED) {
           peg$savedPos = s0;
           s1 = peg$c42(s1, s3);
           s0 = s1;
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
 
     return s0;
   }
 
   function peg$parsekeyword2() {
     var s0, s1, s2, s3, s4, s5;
 
     s0 = peg$currPos;
     if (input.substr(peg$currPos, 8) === peg$c43) {
       s1 = peg$c43;
       peg$currPos += 8;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c44); }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$parsewhitespace();
       if (s2 !== peg$FAILED) {
         s3 = peg$parsenon_whitespace();
         if (s3 !== peg$FAILED) {
           s4 = peg$parsewhitespace();
           if (s4 !== peg$FAILED) {
             s5 = peg$parsenon_newline();
             if (s5 !== peg$FAILED) {
               peg$savedPos = s0;
               s1 = peg$c45(s1, s3, s5);
               s0 = s1;
             } else {
               peg$currPos = s0;
               s0 = peg$FAILED;
             }
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
 
     return s0;
   }
 
   function peg$parsekeywordLocale() {
     var s0, s1, s2, s3, s4, s5, s6;
 
     s0 = peg$currPos;
     if (input.substr(peg$currPos, 11) === peg$c46) {
       s1 = peg$c46;
       peg$currPos += 11;
     } else {
       s1 = peg$FAILED;
       if (peg$silentFails === 0) { peg$fail(peg$c47); }
     }
     if (s1 === peg$FAILED) {
       if (input.substr(peg$currPos, 4) === peg$c48) {
         s1 = peg$c48;
         peg$currPos += 4;
       } else {
         s1 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c49); }
       }
     }
     if (s1 !== peg$FAILED) {
       s2 = peg$currPos;
       if (input.charCodeAt(peg$currPos) === 58) {
         s3 = peg$c50;
         peg$currPos++;
       } else {
         s3 = peg$FAILED;
         if (peg$silentFails === 0) { peg$fail(peg$c51); }
       }
       if (s3 !== peg$FAILED) {
         s4 = peg$currPos;
         s5 = [];
         if (peg$c52.test(input.charAt(peg$currPos))) {
           s6 = input.charAt(peg$currPos);
           peg$currPos++;
         } else {
           s6 = peg$FAILED;
           if (peg$silentFails === 0) { peg$fail(peg$c53); }
         }
         if (s6 !== peg$FAILED) {
           while (s6 !== peg$FAILED) {
             s5.push(s6);
             if (peg$c52.test(input.charAt(peg$currPos))) {
               s6 = input.charAt(peg$currPos);
               peg$currPos++;
             } else {
               s6 = peg$FAILED;
               if (peg$silentFails === 0) { peg$fail(peg$c53); }
             }
           }
         } else {
           s5 = peg$FAILED;
         }
         if (s5 !== peg$FAILED) {
           s4 = input.substring(s4, peg$currPos);
         } else {
           s4 = s5;
         }
         if (s4 !== peg$FAILED) {
           peg$savedPos = s2;
           s3 = peg$c54(s1, s4);
           s2 = s3;
         } else {
           peg$currPos = s2;
           s2 = peg$FAILED;
         }
       } else {
         peg$currPos = s2;
         s2 = peg$FAILED;
       }
       if (s2 === peg$FAILED) {
         s2 = null;
       }
       if (s2 !== peg$FAILED) {
         s3 = peg$parsewhitespace();
         if (s3 !== peg$FAILED) {
           s4 = peg$parsenon_newline();
           if (s4 !== peg$FAILED) {
             peg$savedPos = s0;
             s1 = peg$c55(s1, s2, s4);
             s0 = s1;
           } else {
             peg$currPos = s0;
             s0 = peg$FAILED;
           }
         } else {
           peg$currPos = s0;
           s0 = peg$FAILED;
         }
       } else {
         peg$currPos = s0;
         s0 = peg$FAILED;
       }
     } else {
       peg$currPos = s0;
       s0 = peg$FAILED;
     }
 
     return s0;
   }
 
   peg$result = peg$startRuleFunction();
 
   if (peg$result !== peg$FAILED && peg$currPos === input.length) {
     return peg$result;
   } else {
     if (peg$result !== peg$FAILED && peg$currPos < input.length) {
       peg$fail({ type: "end", description: "end of input" });
     }
 
     throw peg$buildException(
       null,
       peg$maxFailExpected,
       peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
       peg$maxFailPos < input.length
         ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
         : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
     );
   }
 }
 
 })();
 
